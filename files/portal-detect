#!/bin/sh
# Copyright (C) 2019 GL.iNet
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

trap "clear_portal" INT TERM QUIT KILL
[ -f /var/run/portal-detect.lock ] && exit 0

. /lib/functions.sh

ACTION=$1
DEVICE=$2
GATEWAY=$3
INTERFACE=""
DNS1=""
DNS2=""

LAN_IP=""
AUTH_IP=""
REDICT_URL=""
RESULT=0
DEBUG=""
INTERVAL=""
TIMEOUT=""
PROBE_IP=""
JOIN_FLAG=0

LOGGER()
{
	[ "$DEBUG" = "1" ] && logger $@
}

init_var()
{
	local testpoint debug timeout interval
	config_get testpoint  global testpoint
	config_get debug  global debug
	config_get timeout  global timeout
	config_get interval  global interval
	PROBE_IP=${testpoint:-"17.253.85.204" "$testpoint"}
	DEBUG=${debug:-"0" "$debug"}
	INTERVAL=${interval:-"10" "$interval"}
	TIMEOUT=${timeout:-"0" "$timeout"}
	LOGGER -t portal-init "probe-ip:$PROBE_IP debug:$DEBUG interval:$INTERVAL timeout:$TIMEOUT"
}

config_load portal-detect
config_foreach init_var

#To avoid long waits at exit time, we need to split the sleep
split_sleep()
{
	local counter=$1
	while [ true ];do
		[ "$counter" -le 0 ] && break
		sleep 1
		let counter=counter-1
	done	
}

[ -z "$DEVICE" ] && {
	LOGGER portal-detect "Need a valid network device"
	exit 0
}

INTERFACE=$(ubus call network.interface dump|jsonfilter -e "@.interface[@.l3_device='${DEVICE}'].interface")

[ -z "$INTERFACE" ] && {
	LOGGER portal-detect "Need a valid interface"
	exit 0
}

[ -z "$GATEWAY" ] && {
	GATEWAY=$(ifstatus ${INTERFACE}|jsonfilter -e  @.route[0].nexthop)
}

[ -z "$DEVICE" -o -z "$GATEWAY" -o -z "$ACTION" ] && {
	LOGGER -t portal-prarm "$ACTION $DEVICE $GATEWAY"
	exit 0
}

touch /var/run/portal-detect.lock

DNS1=$(ifstatus ${INTERFACE}|jsonfilter -e '@["dns-server"][0]')
DNS2=$(ifstatus ${INTERFACE}|jsonfilter -e '@["dns-server"][1]')
[ -z "$DNS1" ] && {
	DNS1="$GATEWAY"
}
[ -z "$DNS2" ] && {
	DNS2="$GATEWAY"
}

ipt_safe()
{
	$@
	[ ! $? = 0  ] && {
		LOGGER "iptables command execute failed, try again!"
		sleep 0.5
		$@
	}
	
}

#Check the VPN and cloudflare and rebind protection
check_vpn_dns()
{
	local ov wg cf rb ss
	ov=$(uci get glconfig.openvpn.enable)
	wg=$( uci get wireguard.@proxy[0].enable)
	cf=$(uci get glconfig.general.cloudflare_dns)
	rb=$(uci get dhcp.@dnsmasq[0].rebind_protection)
	ss=$(pidof ss-redir)
	[ ! "$ss" = "" ] && {
		ipset add ss_spec_dst_bp ${PROBE_IP} 2>/dev/null
	}
	[ "$ov" != "1" -a  "$wg" != "1" -a "$cf" != "1" -a "$rb" != "1" -a "$ss" = "" ] && return 0
	return 1
}

#Probe the portal AP
probe_portal()
{
	local wan_status
	LOGGER -t portal-probe "probe"
	check_vpn_dns
	[ $? = 0 ] && {
		LOGGER -t portal-probe "not any VPN or DNS setings, just return"
		RESULT=0
		return 0;
	}
	wan_status=$(cat /var/run/mwan3/iface_state/wan 2>/dev/null)
	[ "$wan_status" = "online" ] && {
		LOGGER -t portal-probe "wan is online, just return"
		RESULT=0
		return 0	
	}
	tmp=$(curl --connect-timeout ${TIMEOUT} --interface $DEVICE --dns-interface $DEVICE --dns-servers $DNS1  ${PROBE_IP} \
	-s -w "%{http_code}@@:@@%{redirect_url}" |grep -e http-equiv=\"refresh\" -e @@:@@ )
	[ $? = 0 ] || {
		RESULT=0
		return 0
	}
	http_code=$(echo $tmp|tail -n 1|awk -F '@@:@@' '{print $1}')
	[ "$http_code" = 302 ] && {
		REDICT_URL=$(echo $tmp|tail -n 1|awk -F '/' '{print $3}')
		LOGGER -t portal-probe "httpcode:$http_code URL:$REDICT_URL"
		RESULT=2
		return 0
	}

	[ "$http_code" = 200 ] && {
		REDICT_URL=$(echo $tmp|head -n 1|awk -F '/' '{print $3}')
		LOGGER -t portal-probe "httpcode:$http_code URL:$REDICT_URL"
		RESULT=1
		[ -z "$REDICT_URL" ] && RESULT=0
		return 0
	}

	RESULT=0
	return 0
}

#Cycle check for authentication status
poll_portal()
{
	local wan_status
	LOGGER -t portal-probe "poll"
	while [ true ];do
	check_vpn_dns
	[ $? = 0 ] && {
		LOGGER -t portal-poll "not any VPN or DNS setings, just return"
		remove_portal
		break;
	}	
	wan_status=$(cat /var/run/mwan3/iface_state/wan 2>/dev/null)
	[ "$wan_status" = "online" ] && {
		LOGGER -t portal-poll "wan online,stop portal poll"
		remove_portal
		break
	}

	tmp=$(curl --connect-timeout ${TIMEOUT} --interface $DEVICE --dns-interface $DEVICE --dns-servers $DNS1  ${PROBE_IP} \
	-s -w "%{http_code}@@:@@" |grep -e http-equiv=\"refresh\" -e @@:@@ )
	[ $? = 0 ] || continue
	http_code=$(echo $tmp|tail -n 1|awk -F '@@:@@' '{print $1}')
	[ "$http_code" = 302 ] && {
		split_sleep 2
		continue
	}

	[ "$http_code" = 200 ] && {
		REDICT_URL=$(echo $tmp|head -n 1|awk -F '/' '{print $3}')
		[ -n "$REDICT_URL" ] && {
			split_sleep 2
			continue
		}
	}

	LOGGER -t portal-poll "authenticated"
	split_sleep 5
	remove_portal
	break

	done
}

join_portal()
{

	#Use curl's DNS asynchronous resolution feature,which requires curl to support libcares
	[ $RESULT = 2 ] && {
		AUTH_IP=$(curl --connect-timeout ${TIMEOUT} --interface $DEVICE --dns-interface $DEVICE  --dns-server $DNS1 -Ls -w "%{remote_ip}"  ${PROBE_IP} -o /dev/null)
	}
	[ $RESULT = 1 ] && {
		AUTH_IP=$(curl --connect-timeout ${TIMEOUT} --interface $DEVICE --dns-interface $DEVICE  --dns-server $DNS1 -Ls -w "%{remote_ip}"  ${REDICT_URL} -o /dev/null)
	}
	[ -z "$AUTH_IP" ] && return

	LAN_IP=$(ifstatus lan | jsonfilter -e '@["ipv4-address"][0].address')
	[ -z "$LAN_IP" ] && {
		LOGGER -t portal-join "lan ip is null"
		return
	}
	JOIN_FLAG=1

	ipset create gl_portal_whitelist hash:net
	#Add the required IP for authentication to the white list
	ipset add gl_portal_whitelist ${GATEWAY}/32
	ipset add gl_portal_whitelist ${AUTH_IP}/32
	ipset add gl_portal_whitelist ${PROBE_IP}/32
	ipset add gl_portal_whitelist ${LAN_IP}/32
	ipset add gl_portal_whitelist ${DNS1}/32
	ipset add gl_portal_whitelist ${DNS2}/32
	
	echo "#temporary config" > /tmp/dnsmasq.d/portal-detect.conf
	#To prevent data leaks, we need to hijack the URL locally
	echo address=/.com/${PROBE_IP} >>/tmp/dnsmasq.d/portal-detect.conf
	echo address=/.net/${PROBE_IP} >>/tmp/dnsmasq.d/portal-detect.conf
	echo address=/.org/${PROBE_IP} >>/tmp/dnsmasq.d/portal-detect.conf
	echo address=/.top/${PROBE_IP} >>/tmp/dnsmasq.d/portal-detect.conf
	echo address=/.cn/${PROBE_IP} >>/tmp/dnsmasq.d/portal-detect.conf

	#Add commonly used portal explorer urls to the white list
	echo server=/${REDICT_URL}/$DNS1 >>/tmp/dnsmasq.d/portal-detect.conf
	echo ipset=/${REDICT_URL}/gl_portal_whitelist >>/tmp/dnsmasq.d/portal-detect.conf
	echo server=/apple.com/$DNS1 >>/tmp/dnsmasq.d/portal-detect.conf
	echo ipset=/apple.com/gl_portal_whitelist >>/tmp/dnsmasq.d/portal-detect.conf
	echo server=/${PROBE_IP}/$DNS1 >>/tmp/dnsmasq.d/portal-detect.conf
	echo ipset=/${PROBE_IP}/gl_portal_whitelist >>/tmp/dnsmasq.d/portal-detect.conf
	echo server=/ssl.google-analytics.com/$DNS1 >>/tmp/dnsmasq.d/portal-detect.conf
	echo ipset=/ssl.google-analytics.com/gl_portal_whitelist >>/tmp/dnsmasq.d/portal-detect.conf
	echo server=/captive.g.aaplimg.com/$DNS1 >>/tmp/dnsmasq.d/portal-detect.conf
	echo ipset=/captive.g.aaplimg.com/gl_portal_whitelist >>/tmp/dnsmasq.d/portal-detect.conf
	
	#Prevent authentication pages from being rejected, which can happen on some lans
	echo rebind-domain-ok=${REDICT_URL}  >>/tmp/dnsmasq.d/portal-detect.conf
	
	#Read the Linux connection track mark associated with incoming DNS queries and set the same mark value on upstream traffic used to answer those queries.
	echo conntrack  >>/tmp/dnsmasq.d/portal-detect.conf	
	
	/etc/init.d/dnsmasq restart
	
	while [ true ];do
		[ ! -f /var/run/fw3.lock ] && break
		sleep 1
		LOGGER -t portal-join "wait for firewall free"
	done
	
	#Allows forwarding data  that the IP address in the whitelist
	iptables  -N GL_PORTAL_DETECT
	iptables  -I FORWARD -j GL_PORTAL_DETECT
	iptables  -I GL_PORTAL_DETECT -m set --match-set gl_portal_whitelist dst -j ACCEPT

	#Force local DNS resolution
	iptables -t nat -N GL_PORTAL_DETECT
	iptables -t nat -I PREROUTING -j GL_PORTAL_DETECT
	iptables -t nat -A GL_PORTAL_DETECT -p udp -m udp --dport 53 -j DNAT --to-destination $LAN_IP
	iptables -t nat -A GL_PORTAL_DETECT -p tcp -m tcp --dport 53 -j DNAT --to-destination $LAN_IP
	
	#The IP in the whitelist does not through SS
	iptables -t nat -C SS_SPEC_LAN_DG -m mark --mark 0x80/0x80 -j RETURN
	[ ! "$?" = "0" ] && iptables -t nat -I SS_SPEC_LAN_DG -m mark --mark 0x80/0x80 -j RETURN

	#Mark the IP address in the whitelist
	iptables -t mangle -N GL_PORTAL_DETECT
	iptables -t mangle -A PREROUTING -j GL_PORTAL_DETECT
	iptables -t mangle -A GL_PORTAL_DETECT -m set --match-set gl_portal_whitelist dst -m conntrack --ctstate NEW  -j MARK --set-mark 0x80/0x80
	iptables -t mangle -A GL_PORTAL_DETECT -m mark  --mark 0x80/0x80 -j CONNMARK --save-mark --nfmask 0x80 --ctmask 0x80
	iptables -t mangle -A GL_PORTAL_DETECT -m mark  --mark 0x80/0x80 -j CONNMARK --restore-mark --nfmask 0x80 --ctmask 0x80
	
	#Let the IP address in the whitelist go to station device
	ip route add via $GATEWAY 0.0.0.0/1 dev ${DEVICE}  table 50
	ip route add via $GATEWAY 128.0.0.0/1 dev ${DEVICE}  table 50
	ip rule add fwmark 0x80/0x80 table 50
	
	
}

#Remove the rules
remove_portal()
{
	LOGGER -t portal-remove "remove"
	[ $JOIN_FLAG = 1 ] ||  return
	ip rule del fwmark 0x80/0x80 table 50
	ip route flush table 50

	while [ true ];do
		[ ! -f /var/run/fw3.lock ] && break
		sleep 1
		LOGGER -t portal-remove "wait for firewall free"
	done
	ipt_safe iptables -t mangle -D PREROUTING -j GL_PORTAL_DETECT
	ipt_safe iptables -t mangle -F  GL_PORTAL_DETECT
	ipt_safe iptables -t mangle -X GL_PORTAL_DETECT	
	
	ipt_safe iptables -t nat -D PREROUTING -j GL_PORTAL_DETECT
	ipt_safe iptables -t nat -F  GL_PORTAL_DETECT
	ipt_safe iptables -t nat -X GL_PORTAL_DETECT
	
	iptables -t nat -C SS_SPEC_LAN_DG -m mark --mark 0x80/0x80 -j RETURN
	[ "$?" = "0" ] && iptables -t nat -D SS_SPEC_LAN_DG -m mark --mark 0x80/0x80 -j RETURN

	ipt_safe iptables -D FORWARD -j GL_PORTAL_DETECT
	ipt_safe iptables -F  GL_PORTAL_DETECT
	ipt_safe iptables -X GL_PORTAL_DETECT	

	[ -f /tmp/dnsmasq.d/portal-detect.conf ] && rm  /tmp/dnsmasq.d/portal-detect.conf
 	/etc/init.d/dnsmasq restart
	
	ipset destroy gl_portal_whitelist
	JOIN_FLAG=0
}

clear_portal() {
	remove_portal
	[ -f /var/run/portal-detect.lock ] && rm /var/run/portal-detect.lock
	exit 0
}


[ "$ACTION" = "join" ] && {
	while [ true ];do
		probe_portal
		[ $RESULT != 0 ] && {
			join_portal
			poll_portal
		}
		split_sleep ${INTERVAL}
	done
}

[ -f /var/run/portal-detect.lock ] && rm /var/run/portal-detect.lock
exit $RESULT



